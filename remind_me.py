import json
import os
import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP
from dateutil.relativedelta import relativedelta
import asyncio
from config import TOKEN
from cryptography.fernet import Fernet

# –ß–∏—Ç–∞–µ–º TOKEN –∏–∑ config

DATA_FILE = 'reminders.json'


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
def load_key():
    if os.path.exists('secret.key'):
        with open('secret.key', 'rb') as key_file:
            return key_file.read()
    else:
        key = Fernet.generate_key()
        with open('secret.key', 'wb') as key_file:
            key_file.write(key)
        return key


KEY = load_key()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á
cipher = Fernet(KEY)


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}
# –î–æ–±–∞–≤–∏–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π
user_messages = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_filename = 'remind_me_bot.log'
logging.basicConfig(
    filename=log_filename,
    filemode='a',
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    encoding='utf-8'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
if not os.path.exists(DATA_FILE):
    with open(DATA_FILE, 'w') as f:
        json.dump({}, f)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def load_reminders() -> dict:
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as file:
            content = file.read()
            if content:
                return json.loads(content)
            return {}
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logger.error(f"Error loading reminders: {e}")
        return {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def save_reminders(reminders: dict):
    with open(DATA_FILE, 'w', encoding='utf-8') as file:
        json.dump(reminders, file, ensure_ascii=False, indent=4)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def add_reminder(user_id: str, time: str, message: str, repeat: str):
    reminders = load_reminders()
    if user_id not in reminders:
        reminders[user_id] = []

    encrypted_message = cipher.encrypt(message.encode()).decode()  # –®–∏—Ñ—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    reminders[user_id].append({
        'time': time,
        'message': encrypted_message,
        'repeat': repeat,
        'sent': False
    })

    logger.info(f"Added encrypted reminder for user {user_id}: {encrypted_message}")
    save_reminders(reminders)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def get_type_keyboard():
    keyboard = [
        [
            InlineKeyboardButton("–ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ", callback_data='–µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ'),
            InlineKeyboardButton("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data='–µ–∂–µ–¥–Ω–µ–≤–Ω–æ')
        ],
        [
            InlineKeyboardButton("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", callback_data='–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ'),
            InlineKeyboardButton("–ï–∂–µ–º–µ—Å—è—á–Ω–æ", callback_data='–µ–∂–µ–º–µ—Å—è—á–Ω–æ')
        ],
        [
            InlineKeyboardButton("–ï–∂–µ–≥–æ–¥–Ω–æ", callback_data='–µ–∂–µ–≥–æ–¥–Ω–æ')
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 30 –º–∏–Ω—É—Ç
def get_time_keyboard():
    hours = [f'{i:02}' for i in range(0, 24)]  # –ß–∞—Å—ã –æ—Ç 00 –¥–æ 23
    minutes = [f'00', f'30']  # –ú–∏–Ω—É—Ç—ã —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 30 –º–∏–Ω—É—Ç
    time_keyboard = [[f'{hour}:{minute}' for minute in minutes] for hour in hours]
    return ReplyKeyboardMarkup(time_keyboard, one_time_keyboard=True)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ ID
async def delete_user_messages(user_id: str, context: ContextTypes.DEFAULT_TYPE):
    if user_id in user_messages:
        for message_id in user_messages[user_id]:
            try:
                await context.bot.delete_message(chat_id=user_id, message_id=message_id)
            except Exception as e:
                logger.error(f"Failed to delete message for user {user_id}: {e}")
        user_messages[user_id] = []


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! üëã\n'
        '–Ø —Ç–≤–æ–π –≤–µ—Ä–Ω—ã–π –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. üï∞\n\n'
        '–¢—ã –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –∑–∞–±—ã–≤–∞–ª —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ? ü§î\n'
        '–ù–µ –±–µ–¥–∞! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–Ω–∏—Ç—å –æ–±–æ –≤—Å–µ—Ö –¥–µ–ª–∞—Ö, –¥–∞–∂–µ –æ —Ç–µ—Ö, –∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–∫ —Ö–æ—á–µ—Ç—Å—è –∑–∞–±—ã—Ç—å. üòÖ\n\n'
        '–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n'
        'üìå –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?\n'
        '–ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É: /set_reminder\n'
        'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è? –õ–µ–≥–∫–æ!\n'
        '–ñ–º–∏: /list_reminders\n'
        'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ª–∏—à–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ? –ë–µ–∑ –ø—Ä–æ–±–ª–µ–º!\n'
        '–í–≤–µ–¥–∏: /delete_reminder\n\n'
        '–î–æ–≤–µ—Ä—å –º–Ω–µ —Å–≤–æ–∏ –∑–∞–±–æ—Ç—ã, –∞ —Å–∞–º –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è –∂–∏–∑–Ω—å—é! üòé'
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_reminder
async def set_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    user_data[user_id] = {}
    msg = await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:',
        reply_markup=get_type_keyboard()
    )
    user_messages[user_id] = [msg.message_id]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = str(query.from_user.id)

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    reminder_type = query.data
    user_data[user_id]['type'] = reminder_type

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    calendar, step = DetailedTelegramCalendar().build()
    await query.answer()
    msg = await query.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É ({LSTEP[step]}):", reply_markup=calendar)
    user_messages[user_id].append(msg.message_id)  # –î–æ–±–∞–≤–ª—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
async def calendar_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = str(query.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data:
        await query.answer()
        await query.edit_message_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        return

    # –†–∞–±–æ—Ç–∞ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
    result, key, step = DetailedTelegramCalendar().process(query.data)
    if not result and key:
        msg = await query.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É ({LSTEP[step]}):", reply_markup=key)
        user_messages[user_id].append(msg.message_id)
    elif result:
        user_data[user_id]['date'] = result
        await query.answer()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
        msg = await context.bot.send_message(chat_id=query.message.chat_id,
                                             text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {result}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
                                             reply_markup=get_time_keyboard())
        user_messages[user_id].append(msg.message_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)

    if user_id not in user_data or 'date' not in user_data[user_id]:
        await update.message.reply_text('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_reminder.')
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–æ –ª–∏ –≤—Ä–µ–º—è
    if 'time' not in user_data[user_id]:
        user_data[user_id]['time'] = update.message.text
        user_messages[user_id].append(update.message.message_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –≤—Ä–µ–º–µ–Ω–∏
        msg = await update.message.reply_text('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–Ω–∏—Ç—å.')
        user_messages[user_id].append(msg.message_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç
    else:
        reminder_message = update.message.text
        reminder_date = user_data[user_id]['date']
        reminder_time = user_data[user_id]['time']
        reminder_type = user_data[user_id]['type']

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        reminder_datetime_str = f"{reminder_date} {reminder_time}"
        try:
            reminder_datetime = datetime.strptime(reminder_datetime_str, '%Y-%m-%d %H:%M')
            encrypted_message = cipher.encrypt(reminder_message.encode()).decode()
            add_reminder(user_id, reminder_datetime.strftime('%Y-%m-%d %H:%M'), reminder_message, reminder_type)
            logger.info(f"Reminder set by user {user_id}: {encrypted_message}")
            await update.message.reply_text(f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ {reminder_datetime_str}. '
                                            f'–ü–æ–≤—Ç–æ—Ä: {reminder_type}')

        except ValueError:
            await update.message.reply_text('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–µ–∫—Å—Ç–æ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        user_messages[user_id].append(update.message.message_id)

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await delete_user_messages(user_id, context)
        del user_data[user_id]


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list_reminders
async def list_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    reminders = load_reminders()
    user_reminders = reminders.get(user_id, [])

    if not user_reminders:
        await update.message.reply_text('–£ –≤–∞—Å –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.')
        return

    message_lines = ['–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:']
    for i, reminder in enumerate(user_reminders):
        decrypted_message = cipher.decrypt(reminder['message'].encode()).decode()  # –î–µ—à–∏—Ñ—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_lines.append(
            f"üóìÔ∏è {reminder['time']} - {decrypted_message}\n"
            f"[–ü–æ–≤—Ç–æ—Ä: {reminder['repeat']}. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {'–î–∞' if reminder['sent'] else '–ù–µ—Ç'}]"
        )

    await update.message.reply_text('\n'.join(message_lines))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete_reminder
async def delete_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    reminders = load_reminders()
    user_reminders = reminders.get(user_id, [])

    if not user_reminders:
        await update.message.reply_text('–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.')
        return

    keyboard = []
    for i, reminder in enumerate(user_reminders, 1):
        decrypted_message = cipher.decrypt(reminder['message'].encode()).decode()
        reminder_text = f"{reminder['time']} - {decrypted_message}"
        keyboard.append([InlineKeyboardButton(reminder_text, callback_data=f"delete_{i}")])
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', reply_markup=reply_markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
async def delete_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = str(query.from_user.id)
    data = query.data

    reminders = load_reminders()
    user_reminders = reminders.get(user_id, [])

    if data.startswith('delete_'):
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å, —á—Ç–æ–±—ã –æ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ (–æ—Ç–Ω–∏–º–∞–µ–º 1)
        index = int(data.split('_')[1]) - 1
        if 0 <= index < len(user_reminders):
            deleted_reminder = user_reminders.pop(index)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            reminders[user_id] = user_reminders
            save_reminders(reminders)

            await query.answer()
            await query.edit_message_text(f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '
                                          f'"{cipher.decrypt(deleted_reminder["message"].encode()).decode()}"'
                                          f' —É–¥–∞–ª–µ–Ω–æ.')
            logger.info(f"Reminder deleted by user {user_id}: "
                        f"{cipher.encrypt(deleted_reminder['message'].encode()).decode()}")
        else:
            await query.answer()
            await query.edit_message_text('–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.')
            logger.error(f"Failed to delete reminder for user {user_id}: Invalid index {index}")

    elif data == 'cancel':
        await query.answer()
        await query.edit_message_text('–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def check_reminders(application: Application):
    now = datetime.now()
    now_str = now.strftime('%Y-%m-%d %H:%M')
    logger.info(f"Checking reminders at {now_str}")

    reminders = load_reminders()
    updated_reminders = {}

    for user_id, user_reminders in reminders.items():
        new_reminders = []
        for reminder in user_reminders:
            reminder_time = datetime.strptime(reminder['time'], '%Y-%m-%d %H:%M')
            if reminder_time <= now and not reminder['sent']:
                chat_id = int(user_id)
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    decrypted_message = cipher.decrypt(reminder['message'].encode()).decode()
                    await application.bot.send_message(chat_id=chat_id, text=decrypted_message)
                    logger.info(f"Sent message to chat_id {chat_id}: "
                                f"{cipher.encrypt(decrypted_message.encode()).decode()}")
                    reminder['sent'] = True

                    # –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
                    if not reminder.get('is_repeat', False):
                        new_reminder_time = now + timedelta(minutes=10)
                        new_reminders.append({
                            'time': new_reminder_time.strftime('%Y-%m-%d %H:%M'),
                            'message': cipher.encrypt(decrypted_message.encode()).decode(),
                            'repeat': '–µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ',
                            'sent': False,
                            'is_repeat': True
                        })

                    save_reminders(reminders)

                except Exception as e:
                    logger.error(f"Failed to send message to chat_id {chat_id}: {e}")

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ
                if reminder['repeat'] != '–µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ':
                    if reminder['repeat'] == '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ':
                        reminder_time += timedelta(days=1)
                    elif reminder['repeat'] == '–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ':
                        reminder_time += timedelta(weeks=1)
                    elif reminder['repeat'] == '–µ–∂–µ–º–µ—Å—è—á–Ω–æ':
                        reminder_time += relativedelta(months=1)
                    elif reminder['repeat'] == '–µ–∂–µ–≥–æ–¥–Ω–æ':
                        reminder_time += relativedelta(years=1)

                    reminder['time'] = reminder_time.strftime('%Y-%m-%d %H:%M')
                    reminder['sent'] = False
                    new_reminders.append(reminder)
            else:
                new_reminders.append(reminder)

        updated_reminders[user_id] = new_reminders

    if updated_reminders != reminders:
        save_reminders(updated_reminders)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
async def run_scheduler(application: Application):
    scheduler = AsyncIOScheduler()
    scheduler.add_job(check_reminders, IntervalTrigger(minutes=1), args=[application])
    scheduler.start()
    while True:
        await asyncio.sleep(1)


def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('set_reminder', set_reminder))
    application.add_handler(CommandHandler('list_reminders', list_reminders))
    application.add_handler(CommandHandler('delete_reminder', delete_reminder))
    application.add_handler(CallbackQueryHandler(delete_button_handler, pattern='^(delete_.*|cancel)$'))
    application.add_handler(CallbackQueryHandler(button_handler,
                                                 pattern='^(–µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ|–µ–∂–µ–¥–Ω–µ–≤–Ω–æ|–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ|–µ–∂–µ–º–µ—Å—è—á–Ω–æ|–µ–∂–µ–≥–æ–¥–Ω–æ)$'))
    application.add_handler(CallbackQueryHandler(calendar_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    loop = asyncio.get_event_loop()
    loop.create_task(run_scheduler(application))

    application.run_polling()


if __name__ == '__main__':
    main()
